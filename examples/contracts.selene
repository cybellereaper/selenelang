package examples

// Function contracts and reusable contract declarations.
contract validators {
    fn withinRange(value: Number, min: Number, max: Number): Boolean {
        return value >= min && value <= max;
    }
}

fn clamp(value: Number, min: Number, max: Number): Number
    contract {
        returns(result) => result >= min;
        returns(result) => result <= max;
    }
{
    if value < min {
        return min;
    }
    if value > max {
        return max;
    }
    return value;
}

fn main() {
    let values = [-5, 3, 42];
    let clamped0 = clamp(values[0], 0, 10);
    print("clamp(" + values[0] + ") => " + clamped0);
    print("within range? => " + validators.withinRange(clamped0, 0, 10));

    let clamped1 = clamp(values[1], 0, 10);
    print("clamp(" + values[1] + ") => " + clamped1);
    print("within range? => " + validators.withinRange(clamped1, 0, 10));

    let clamped2 = clamp(values[2], 0, 10);
    print("clamp(" + values[2] + ") => " + clamped2);
    print("within range? => " + validators.withinRange(clamped2, 0, 10));
}

