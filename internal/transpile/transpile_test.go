package transpile

import (
	"strings"
	"testing"

	"selenelang/internal/ast"
)

func TestToGoProducesDeterministicProgram(t *testing.T) {
	ident := func(name string) *ast.Identifier { return &ast.Identifier{Name: name} }
	program := &ast.Program{
		Items: []ast.ProgramItem{
			&ast.PackageDeclaration{Name: ident("tools")},
			&ast.ImportDeclaration{PathLiteral: "fmt"},
			&ast.FunctionDeclaration{
				Name: ident("main"),
				Body: &ast.BlockStatement{Statements: []ast.Statement{
					&ast.ExpressionStatement{Expression: &ast.CallExpression{
						Callee: &ast.MemberExpression{
							Object:   &ast.Identifier{Name: "fmt"},
							Property: "Println",
						},
						Arguments: []ast.Expression{
							&ast.StringLiteral{Value: "hello"},
						},
					}},
				}},
			},
		},
	}

	out, err := ToGo(program)
	if err != nil {
		t.Fatalf("ToGo returned error: %v", err)
	}
	const expected = "// Code generated by selene transpile. DO NOT EDIT.\n" +
		"package tools\n\n" +
		"import (\n\t\"fmt\"\n)\n\n" +
		"func main() {\n\tfmt.Println(\"hello\")\n}\n"
	if out != expected {
		t.Fatalf("unexpected transpiled output:\n--- got ---\n%s\n--- want ---\n%s", out, expected)
	}
	if strings.Contains(out, "\n\n\n") {
		t.Fatalf("transpiled output contains excessive blank lines: %q", out)
	}
}
